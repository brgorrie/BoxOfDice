### YamlMime:ManagedReference
items:
- uid: DiceLibrary.Model.Dice
  commentId: T:DiceLibrary.Model.Dice
  id: Dice
  parent: DiceLibrary.Model
  children:
  - DiceLibrary.Model.Dice.#ctor(System.Int32)
  - DiceLibrary.Model.Dice.Roll
  - DiceLibrary.Model.Dice.Sides
  langs:
  - csharp
  - vb
  name: Dice
  nameWithType: Dice
  fullName: DiceLibrary.Model.Dice
  type: Class
  source:
    remote:
      path: src/DiceLibrary/Model/Dice.cs
      branch: feature/SetupDocFX
      repo: https://github.com/brgorrie/BoxOfDice.git
    id: Dice
    path: ../src/DiceLibrary/Model/Dice.cs
    startLine: 21
  assemblies:
  - DiceLibrary
  namespace: DiceLibrary.Model
  summary: "\nRepresents a single dice with a specified number of sides.\n"
  example: []
  syntax:
    content: 'public class Dice : IDice'
    content.vb: Public Class Dice Implements IDice
  inheritance:
  - System.Object
  implements:
  - DiceLibrary.Model.IDice
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: DiceLibrary.Model.Dice.Sides
  commentId: P:DiceLibrary.Model.Dice.Sides
  id: Sides
  parent: DiceLibrary.Model.Dice
  langs:
  - csharp
  - vb
  name: Sides
  nameWithType: Dice.Sides
  fullName: DiceLibrary.Model.Dice.Sides
  type: Property
  source:
    remote:
      path: src/DiceLibrary/Model/Dice.cs
      branch: feature/SetupDocFX
      repo: https://github.com/brgorrie/BoxOfDice.git
    id: Sides
    path: ../src/DiceLibrary/Model/Dice.cs
    startLine: 26
  assemblies:
  - DiceLibrary
  namespace: DiceLibrary.Model
  summary: "\nThe number of sides on the dice.\n"
  example: []
  syntax:
    content: public int Sides { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Sides As Integer
  overload: DiceLibrary.Model.Dice.Sides*
  implements:
  - DiceLibrary.Model.IDice.Sides
- uid: DiceLibrary.Model.Dice.#ctor(System.Int32)
  commentId: M:DiceLibrary.Model.Dice.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: DiceLibrary.Model.Dice
  langs:
  - csharp
  - vb
  name: Dice(int)
  nameWithType: Dice.Dice(int)
  fullName: DiceLibrary.Model.Dice.Dice(int)
  type: Constructor
  source:
    remote:
      path: src/DiceLibrary/Model/Dice.cs
      branch: feature/SetupDocFX
      repo: https://github.com/brgorrie/BoxOfDice.git
    id: .ctor
    path: ../src/DiceLibrary/Model/Dice.cs
    startLine: 33
  assemblies:
  - DiceLibrary
  namespace: DiceLibrary.Model
  summary: "\nInitializes a new instance of the <xref href=\"DiceLibrary.Model.Dice\" data-throw-if-not-resolved=\"false\"></xref> class with the specified number of sides.\n"
  example: []
  syntax:
    content: public Dice(int sides)
    parameters:
    - id: sides
      type: System.Int32
      description: The number of sides on the dice. Must be greater than or equal to 1.
    content.vb: Public Sub New(sides As Integer)
  overload: DiceLibrary.Model.Dice.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the number of sides is less than 1.
  nameWithType.vb: Dice.New(Integer)
  fullName.vb: DiceLibrary.Model.Dice.New(Integer)
  name.vb: New(Integer)
- uid: DiceLibrary.Model.Dice.Roll
  commentId: M:DiceLibrary.Model.Dice.Roll
  id: Roll
  parent: DiceLibrary.Model.Dice
  langs:
  - csharp
  - vb
  name: Roll()
  nameWithType: Dice.Roll()
  fullName: DiceLibrary.Model.Dice.Roll()
  type: Method
  source:
    remote:
      path: src/DiceLibrary/Model/Dice.cs
      branch: feature/SetupDocFX
      repo: https://github.com/brgorrie/BoxOfDice.git
    id: Roll
    path: ../src/DiceLibrary/Model/Dice.cs
    startLine: 46
  assemblies:
  - DiceLibrary
  namespace: DiceLibrary.Model
  summary: "\nRolls the dice and returns the result.\n"
  example: []
  syntax:
    content: public int Roll()
    return:
      type: System.Int32
      description: A random integer between 1 and the number of sides on the dice.
    content.vb: Public Function Roll() As Integer
  overload: DiceLibrary.Model.Dice.Roll*
  implements:
  - DiceLibrary.Model.IDice.Roll
references:
- uid: DiceLibrary.Model
  commentId: N:DiceLibrary.Model
  name: DiceLibrary.Model
  nameWithType: DiceLibrary.Model
  fullName: DiceLibrary.Model
  spec.csharp:
  - uid: DiceLibrary
    name: DiceLibrary
  - name: .
  - uid: DiceLibrary.Model
    name: Model
  spec.vb:
  - uid: DiceLibrary
    name: DiceLibrary
  - name: .
  - uid: DiceLibrary.Model
    name: Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: DiceLibrary.Model.IDice
  commentId: T:DiceLibrary.Model.IDice
  parent: DiceLibrary.Model
  name: IDice
  nameWithType: IDice
  fullName: DiceLibrary.Model.IDice
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DiceLibrary.Model.Dice.Sides*
  commentId: Overload:DiceLibrary.Model.Dice.Sides
  name: Sides
  nameWithType: Dice.Sides
  fullName: DiceLibrary.Model.Dice.Sides
- uid: DiceLibrary.Model.IDice.Sides
  commentId: P:DiceLibrary.Model.IDice.Sides
  parent: DiceLibrary.Model.IDice
  name: Sides
  nameWithType: IDice.Sides
  fullName: DiceLibrary.Model.IDice.Sides
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: DiceLibrary.Model.Dice
  commentId: T:DiceLibrary.Model.Dice
  name: Dice
  nameWithType: Dice
  fullName: DiceLibrary.Model.Dice
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: DiceLibrary.Model.Dice.#ctor*
  commentId: Overload:DiceLibrary.Model.Dice.#ctor
  name: Dice
  nameWithType: Dice.Dice
  fullName: DiceLibrary.Model.Dice.Dice
  nameWithType.vb: Dice.New
  fullName.vb: DiceLibrary.Model.Dice.New
  name.vb: New
- uid: DiceLibrary.Model.Dice.Roll*
  commentId: Overload:DiceLibrary.Model.Dice.Roll
  name: Roll
  nameWithType: Dice.Roll
  fullName: DiceLibrary.Model.Dice.Roll
- uid: DiceLibrary.Model.IDice.Roll
  commentId: M:DiceLibrary.Model.IDice.Roll
  parent: DiceLibrary.Model.IDice
  name: Roll()
  nameWithType: IDice.Roll()
  fullName: DiceLibrary.Model.IDice.Roll()
  spec.csharp:
  - uid: DiceLibrary.Model.IDice.Roll
    name: Roll
  - name: (
  - name: )
  spec.vb:
  - uid: DiceLibrary.Model.IDice.Roll
    name: Roll
  - name: (
  - name: )
