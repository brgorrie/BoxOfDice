### YamlMime:ManagedReference
items:
- uid: Roll.InputValidation.InputValidator
  commentId: T:Roll.InputValidation.InputValidator
  id: InputValidator
  parent: Roll.InputValidation
  children:
  - Roll.InputValidation.InputValidator.ParseInput(System.String[])
  langs:
  - csharp
  - vb
  name: InputValidator
  nameWithType: InputValidator
  fullName: Roll.InputValidation.InputValidator
  type: Class
  source:
    remote:
      path: src/Roll/InputValidation/InputValidator.cs
      branch: feature/SetupDocFX
      repo: https://github.com/brgorrie/BoxOfDice.git
    id: InputValidator
    path: ../src/Roll/InputValidation/InputValidator.cs
    startLine: 21
  assemblies:
  - Roll
  namespace: Roll.InputValidation
  summary: "\nProvides methods for validating input strings for dice rolls.\n"
  example: []
  syntax:
    content: 'public class InputValidator : IInputValidator'
    content.vb: Public Class InputValidator Implements IInputValidator
  inheritance:
  - System.Object
  implements:
  - Roll.InputValidation.IInputValidator
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Roll.InputValidation.InputValidator.ParseInput(System.String[])
  commentId: M:Roll.InputValidation.InputValidator.ParseInput(System.String[])
  id: ParseInput(System.String[])
  parent: Roll.InputValidation.InputValidator
  langs:
  - csharp
  - vb
  name: ParseInput(string[])
  nameWithType: InputValidator.ParseInput(string[])
  fullName: Roll.InputValidation.InputValidator.ParseInput(string[])
  type: Method
  source:
    remote:
      path: src/Roll/InputValidation/InputValidator.cs
      branch: feature/SetupDocFX
      repo: https://github.com/brgorrie/BoxOfDice.git
    id: ParseInput
    path: ../src/Roll/InputValidation/InputValidator.cs
    startLine: 36
  assemblies:
  - Roll
  namespace: Roll.InputValidation
  summary: "\nParses the first argument in the array and returns the number of rolls and number of sides values.\nThrows an exception if the input is invalid in that it:\n* doesn&apos;t have the correct number of arguments\n* there is one argument but it is an empty string\n* the argument isn&apos;t of the 1d6 or 2D12 style of specifying die rolls. \n"
  example: []
  syntax:
    content: public (int Rolls, int Sides) ParseInput(string[] args)
    parameters:
    - id: args
      type: System.String[]
      description: The command-line arguments.
    return:
      type: System.ValueTuple{System.Int32,System.Int32}
      description: A tuple containing the number of rolls and the number of sides.
    content.vb: Public Function ParseInput(args As String()) As (Rolls As Integer, Sides As Integer)
  overload: Roll.InputValidation.InputValidator.ParseInput*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the input string is not valid.
  implements:
  - Roll.InputValidation.IInputValidator.ParseInput(System.String[])
  nameWithType.vb: InputValidator.ParseInput(String())
  fullName.vb: Roll.InputValidation.InputValidator.ParseInput(String())
  name.vb: ParseInput(String())
references:
- uid: Roll.InputValidation
  commentId: N:Roll.InputValidation
  name: Roll.InputValidation
  nameWithType: Roll.InputValidation
  fullName: Roll.InputValidation
  spec.csharp:
  - uid: Roll
    name: Roll
  - name: .
  - uid: Roll.InputValidation
    name: InputValidation
  spec.vb:
  - uid: Roll
    name: Roll
  - name: .
  - uid: Roll.InputValidation
    name: InputValidation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Roll.InputValidation.IInputValidator
  commentId: T:Roll.InputValidation.IInputValidator
  parent: Roll.InputValidation
  name: IInputValidator
  nameWithType: IInputValidator
  fullName: Roll.InputValidation.IInputValidator
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: Roll.InputValidation.InputValidator.ParseInput*
  commentId: Overload:Roll.InputValidation.InputValidator.ParseInput
  name: ParseInput
  nameWithType: InputValidator.ParseInput
  fullName: Roll.InputValidation.InputValidator.ParseInput
- uid: Roll.InputValidation.IInputValidator.ParseInput(System.String[])
  commentId: M:Roll.InputValidation.IInputValidator.ParseInput(System.String[])
  parent: Roll.InputValidation.IInputValidator
  isExternal: true
  name: ParseInput(string[])
  nameWithType: IInputValidator.ParseInput(string[])
  fullName: Roll.InputValidation.IInputValidator.ParseInput(string[])
  nameWithType.vb: IInputValidator.ParseInput(String())
  fullName.vb: Roll.InputValidation.IInputValidator.ParseInput(String())
  name.vb: ParseInput(String())
  spec.csharp:
  - uid: Roll.InputValidation.IInputValidator.ParseInput(System.String[])
    name: ParseInput
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Roll.InputValidation.IInputValidator.ParseInput(System.String[])
    name: ParseInput
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: System.String[]
  isExternal: true
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
- uid: System.ValueTuple{System.Int32,System.Int32}
  commentId: T:System.ValueTuple{System.Int32,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  name: (int Rolls, int Sides)
  nameWithType: (int Rolls, int Sides)
  fullName: (int Rolls, int Sides)
  nameWithType.vb: (Rolls As Integer, Sides As Integer)
  fullName.vb: (Rolls As Integer, Sides As Integer)
  name.vb: (Rolls As Integer, Sides As Integer)
  spec.csharp:
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Rolls
    name: Rolls
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Sides
    name: Sides
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Int32,System.Int32}.Rolls
    name: Rolls
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Sides
    name: Sides
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
