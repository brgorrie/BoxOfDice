### YamlMime:ManagedReference
items:
- uid: DiceLibrary.DiceRolling.DiceRoller
  commentId: T:DiceLibrary.DiceRolling.DiceRoller
  id: DiceRoller
  parent: DiceLibrary.DiceRolling
  children:
  - DiceLibrary.DiceRolling.DiceRoller.#ctor(DiceLibrary.Factory.IDiceFactory)
  - DiceLibrary.DiceRolling.DiceRoller.RollDice(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: DiceRoller
  nameWithType: DiceRoller
  fullName: DiceLibrary.DiceRolling.DiceRoller
  type: Class
  source:
    remote:
      path: src/DiceLibrary/DiceRolling/DiceRoller.cs
      branch: feature/SetupDocFX
      repo: https://github.com/brgorrie/BoxOfDice.git
    id: DiceRoller
    path: ../src/DiceLibrary/DiceRolling/DiceRoller.cs
    startLine: 21
  assemblies:
  - DiceLibrary
  namespace: DiceLibrary.DiceRolling
  summary: "\nProvides a mechanism for rolling dice.\n"
  example: []
  syntax:
    content: 'public class DiceRoller : IDiceRoller'
    content.vb: Public Class DiceRoller Implements IDiceRoller
  inheritance:
  - System.Object
  implements:
  - DiceLibrary.DiceRolling.IDiceRoller
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: DiceLibrary.DiceRolling.DiceRoller.#ctor(DiceLibrary.Factory.IDiceFactory)
  commentId: M:DiceLibrary.DiceRolling.DiceRoller.#ctor(DiceLibrary.Factory.IDiceFactory)
  id: '#ctor(DiceLibrary.Factory.IDiceFactory)'
  parent: DiceLibrary.DiceRolling.DiceRoller
  langs:
  - csharp
  - vb
  name: DiceRoller(IDiceFactory)
  nameWithType: DiceRoller.DiceRoller(IDiceFactory)
  fullName: DiceLibrary.DiceRolling.DiceRoller.DiceRoller(DiceLibrary.Factory.IDiceFactory)
  type: Constructor
  source:
    remote:
      path: src/DiceLibrary/DiceRolling/DiceRoller.cs
      branch: feature/SetupDocFX
      repo: https://github.com/brgorrie/BoxOfDice.git
    id: .ctor
    path: ../src/DiceLibrary/DiceRolling/DiceRoller.cs
    startLine: 30
  assemblies:
  - DiceLibrary
  namespace: DiceLibrary.DiceRolling
  summary: "\nInitializes a new instance of the <xref href=\"DiceLibrary.DiceRolling.DiceRoller\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public DiceRoller(IDiceFactory diceFactory)
    parameters:
    - id: diceFactory
      type: DiceLibrary.Factory.IDiceFactory
      description: The <xref href="DiceLibrary.Factory.IDiceFactory" data-throw-if-not-resolved="false"></xref> used to create new dice.
    content.vb: Public Sub New(diceFactory As IDiceFactory)
  overload: DiceLibrary.DiceRolling.DiceRoller.#ctor*
  nameWithType.vb: DiceRoller.New(IDiceFactory)
  fullName.vb: DiceLibrary.DiceRolling.DiceRoller.New(DiceLibrary.Factory.IDiceFactory)
  name.vb: New(IDiceFactory)
- uid: DiceLibrary.DiceRolling.DiceRoller.RollDice(System.Int32,System.Int32)
  commentId: M:DiceLibrary.DiceRolling.DiceRoller.RollDice(System.Int32,System.Int32)
  id: RollDice(System.Int32,System.Int32)
  parent: DiceLibrary.DiceRolling.DiceRoller
  langs:
  - csharp
  - vb
  name: RollDice(int, int)
  nameWithType: DiceRoller.RollDice(int, int)
  fullName: DiceLibrary.DiceRolling.DiceRoller.RollDice(int, int)
  type: Method
  source:
    remote:
      path: src/DiceLibrary/DiceRolling/DiceRoller.cs
      branch: feature/SetupDocFX
      repo: https://github.com/brgorrie/BoxOfDice.git
    id: RollDice
    path: ../src/DiceLibrary/DiceRolling/DiceRoller.cs
    startLine: 42
  assemblies:
  - DiceLibrary
  namespace: DiceLibrary.DiceRolling
  summary: "\nRolls a specified number of dice with a specified number of sides.\n"
  example: []
  syntax:
    content: public int[] RollDice(int rolls, int sides)
    parameters:
    - id: rolls
      type: System.Int32
      description: The number of dice rolls to perform.
    - id: sides
      type: System.Int32
      description: The number of sides on each die.
    return:
      type: System.Int32[]
      description: An array of integers representing the results of each roll.
    content.vb: Public Function RollDice(rolls As Integer, sides As Integer) As Integer()
  overload: DiceLibrary.DiceRolling.DiceRoller.RollDice*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when either the number of rolls or the number of sides is less than 1.
  implements:
  - DiceLibrary.DiceRolling.IDiceRoller.RollDice(System.Int32,System.Int32)
  nameWithType.vb: DiceRoller.RollDice(Integer, Integer)
  fullName.vb: DiceLibrary.DiceRolling.DiceRoller.RollDice(Integer, Integer)
  name.vb: RollDice(Integer, Integer)
references:
- uid: DiceLibrary.DiceRolling
  commentId: N:DiceLibrary.DiceRolling
  name: DiceLibrary.DiceRolling
  nameWithType: DiceLibrary.DiceRolling
  fullName: DiceLibrary.DiceRolling
  spec.csharp:
  - uid: DiceLibrary
    name: DiceLibrary
  - name: .
  - uid: DiceLibrary.DiceRolling
    name: DiceRolling
  spec.vb:
  - uid: DiceLibrary
    name: DiceLibrary
  - name: .
  - uid: DiceLibrary.DiceRolling
    name: DiceRolling
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: DiceLibrary.DiceRolling.IDiceRoller
  commentId: T:DiceLibrary.DiceRolling.IDiceRoller
  parent: DiceLibrary.DiceRolling
  name: IDiceRoller
  nameWithType: IDiceRoller
  fullName: DiceLibrary.DiceRolling.IDiceRoller
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DiceLibrary.DiceRolling.DiceRoller
  commentId: T:DiceLibrary.DiceRolling.DiceRoller
  name: DiceRoller
  nameWithType: DiceRoller
  fullName: DiceLibrary.DiceRolling.DiceRoller
- uid: DiceLibrary.Factory.IDiceFactory
  commentId: T:DiceLibrary.Factory.IDiceFactory
  parent: DiceLibrary.Factory
  name: IDiceFactory
  nameWithType: IDiceFactory
  fullName: DiceLibrary.Factory.IDiceFactory
- uid: DiceLibrary.DiceRolling.DiceRoller.#ctor*
  commentId: Overload:DiceLibrary.DiceRolling.DiceRoller.#ctor
  name: DiceRoller
  nameWithType: DiceRoller.DiceRoller
  fullName: DiceLibrary.DiceRolling.DiceRoller.DiceRoller
  nameWithType.vb: DiceRoller.New
  fullName.vb: DiceLibrary.DiceRolling.DiceRoller.New
  name.vb: New
- uid: DiceLibrary.Factory
  commentId: N:DiceLibrary.Factory
  name: DiceLibrary.Factory
  nameWithType: DiceLibrary.Factory
  fullName: DiceLibrary.Factory
  spec.csharp:
  - uid: DiceLibrary
    name: DiceLibrary
  - name: .
  - uid: DiceLibrary.Factory
    name: Factory
  spec.vb:
  - uid: DiceLibrary
    name: DiceLibrary
  - name: .
  - uid: DiceLibrary.Factory
    name: Factory
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: DiceLibrary.DiceRolling.DiceRoller.RollDice*
  commentId: Overload:DiceLibrary.DiceRolling.DiceRoller.RollDice
  name: RollDice
  nameWithType: DiceRoller.RollDice
  fullName: DiceLibrary.DiceRolling.DiceRoller.RollDice
- uid: DiceLibrary.DiceRolling.IDiceRoller.RollDice(System.Int32,System.Int32)
  commentId: M:DiceLibrary.DiceRolling.IDiceRoller.RollDice(System.Int32,System.Int32)
  parent: DiceLibrary.DiceRolling.IDiceRoller
  isExternal: true
  name: RollDice(int, int)
  nameWithType: IDiceRoller.RollDice(int, int)
  fullName: DiceLibrary.DiceRolling.IDiceRoller.RollDice(int, int)
  nameWithType.vb: IDiceRoller.RollDice(Integer, Integer)
  fullName.vb: DiceLibrary.DiceRolling.IDiceRoller.RollDice(Integer, Integer)
  name.vb: RollDice(Integer, Integer)
  spec.csharp:
  - uid: DiceLibrary.DiceRolling.IDiceRoller.RollDice(System.Int32,System.Int32)
    name: RollDice
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: DiceLibrary.DiceRolling.IDiceRoller.RollDice(System.Int32,System.Int32)
    name: RollDice
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Int32[]
  isExternal: true
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: (
  - name: )
